<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on Logan Turner</title>
    <link>https://logan-james.github.io/project/</link>
    <description>Recent content in Projects on Logan Turner</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 22 Jul 2021 23:22:47 +0100</lastBuildDate><atom:link href="https://logan-james.github.io/project/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Planet Destruction (Dissertation)</title>
      <link>https://logan-james.github.io/project/planet-destruction/</link>
      <pubDate>Thu, 22 Jul 2021 23:22:47 +0100</pubDate>
      
      <guid>https://logan-james.github.io/project/planet-destruction/</guid>
      <description>Planet Destruction (Dissertation) Unreal Engine 4 No GitHub link as the file is too large (2GB!!!)
YouTube link to demo: https://youtu.be/HOlAQVFcYwk
My dissertation explored real-time physics destruction within video games, specifically on a planetary scale. I taught myself how to use Unreal Engine 4 from scratch with its then-experimental Chaos physics system.
I made as much of the project as I could procedurally &amp;ndash; from having half a million star instances to create the night sky to manipulating shaders, creating the appearance of textured, rotating planets.</description>
    </item>
    
    <item>
      <title>Ultimate Chess</title>
      <link>https://logan-james.github.io/project/ultimate-chess/</link>
      <pubDate>Thu, 22 Jul 2021 18:35:48 +0100</pubDate>
      
      <guid>https://logan-james.github.io/project/ultimate-chess/</guid>
      <description>Ultimate Chess C&amp;#43;&amp;#43; GitHub link: https://github.com/logan-james/ultimate-chess
This was my introduction to C++. The purpose of this coursework was to practice implementation of an inheritance hierarchy and use of polymorphism in C++ and introduce ideas of 2D collision detection in computer games. I also made use of unit testing and operator overloading, things I had not done before.
Ultimate Chess in this case can be briefly summarised as:
 Generate a square playing field Determine how many rounds a game should play for Generate a set number of each kind of chess piece (Rook, Bishop, Queen) For each round, move every piece on the board in a random direction by a random distance, ensuring that the movement is valid for the piece.</description>
    </item>
    
    <item>
      <title>Victorian Safe Cracker</title>
      <link>https://logan-james.github.io/project/safe-cracker/</link>
      <pubDate>Thu, 22 Jul 2021 18:16:56 +0100</pubDate>
      
      <guid>https://logan-james.github.io/project/safe-cracker/</guid>
      <description>Victorian Safe Cracker VDM-SL, Isabelle GitHub link: https://github.com/logan-james/safe-cracker
Slightly different in that no program was created, this project looked at modelling how an optimal (or close to) program would solve a Safecracker 40 puzzle.
(Image courtesy of Crux Puzzles)
The model was built using VDM-SL in Overture. After it was built and tested, I began translating it into Isabelle, a proof assistant. From a correct translation, the VDM model could be improved further to create a more optimised version of it.</description>
    </item>
    
    <item>
      <title>Cube Destruction</title>
      <link>https://logan-james.github.io/project/cube-destruction/</link>
      <pubDate>Thu, 22 Jul 2021 18:16:22 +0100</pubDate>
      
      <guid>https://logan-james.github.io/project/cube-destruction/</guid>
      <description>Cube Destruction C&amp;#43;&amp;#43;, OpenGL, GLSL GitHub link: https://github.com/logan-james/cube-destruction
YouTube link to demo: https://youtu.be/RO6M4CT_H1c
Easily one of the most fun pieces of coursework I completed over the course of my degree.
Given a cube mesh file, the task was to destroy it using OpenGL shaders. Many different kinds of shaders were used: vertex and fragment shaders were used in all destruction options, with tessellation evaluation, tessellation control, and geometry shaders being used in more complex destructive scenes.</description>
    </item>
    
  </channel>
</rss>
